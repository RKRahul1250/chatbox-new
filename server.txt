const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const mongoose = require('mongoose');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const forge = require('node-forge');
const multer = require('multer');
const path = require('path');

// Import models
const User = require('./models/User');
const Message = require('./models/Message');
const Group = require('./models/Group');
const File = require('./models/File');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, { cors: { origin: '*' } });
//mongodb+srv://chats:chats@cluster0.g7jsw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
// Middleware
app.use(cors());
app.use(express.json());
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// MongoDB Connection
mongoose.connect('mongodb://localhost:27017/employee-chat', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
    .then(() => console.log('MongoDB connected successfully'))
    .catch(err => console.error('MongoDB connection error:', err.message));

// JWT Secret
const JWT_SECRET = 'your-secret-key';

// Multer Configuration
const storage = multer.diskStorage({
    destination: (req, file, cb) => cb(null, 'uploads/'),
    filename: (req, file, cb) => cb(null, Date.now() + path.extname(file.originalname))
});
const upload = multer({
    storage,
    limits: { fileSize: 10 * 1024 * 1024 } // 10MB limit
});

// RSA Key Generation
function generateKeys() {
    const keypair = forge.pki.rsa.generateKeyPair({ bits: 2048 });
    return {
        publicKey: forge.pki.publicKeyToPem(keypair.publicKey),
        privateKey: forge.pki.privateKeyToPem(keypair.privateKey),
    };
}

// Message Encryption
const encryptMessage = (content, publicKeyPem) => {
    try {
        const publicKey = forge.pki.publicKeyFromPem(publicKeyPem);
        const encrypted = publicKey.encrypt(forge.util.encodeUtf8(content), 'RSA-OAEP');
        return forge.util.encode64(encrypted);
    } catch (error) {
        console.error('Encryption error:', error.message);
        throw error;
    }
};

// Authentication Middleware
const authenticate = (req, res, next) => {
    let token = req.headers['authorization'];
    if (!token) return res.status(401).json({ error: 'Unauthorized' });
    if (token.startsWith('Bearer ')) token = token.slice(7);

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.userId = decoded.id;
        next();
    } catch (err) {
        console.error('Token verification failed:', err.message);
        return res.status(403).json({ error: 'Invalid token' });
    }
};

// Routes
app.get('/test', (req, res) => {
    console.log('Test endpoint hit');
    res.send('Server is running');
});

// User Signup
app.post('/api/signup', upload.single('image'), async (req, res) => {
    const { name, email, password, location, designation } = req.body;
    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) return res.status(400).json({ error: 'Email already in use' });

        const { publicKey, privateKey } = generateKeys();
        const userData = {
            name,
            email,
            password, // TODO: Hash this in production!
            location,
            designation,
            publicKey,
            privateKey,
            status: 'Online'
        };

        if (req.file) userData.image = `/uploads/${req.file.filename}`;

        const user = new User(userData);
        await user.save();
        const token = jwt.sign({ id: user._id }, JWT_SECRET);
        res.status(201).json({ token, privateKey });
    } catch (err) {
        console.error('Signup error:', err.message);
        res.status(500).json({ error: 'Server error' });
    }
});

// User Login
app.post('/api/login', async (req, res) => {
    const { email, password } = req.body;
    try {
        const user = await User.findOne({ email, password }).lean();
        if (!user) return res.status(401).json({ error: 'Invalid credentials' });
        user.status = 'Online';
        await User.updateOne({ _id: user._id }, { status: 'Online' });
        const token = jwt.sign({ id: user._id }, JWT_SECRET);
        res.json({ token, privateKey: user.privateKey });
    } catch (err) {
        console.error('Login error:', err.message);
        res.status(500).json({ error: 'Server error' });
    }
});

// Get All Users
app.get('/api/users', authenticate, async (req, res) => {
    try {
        const users = await User.find({}, 'name _id status image').lean();
        res.json(users);
    } catch (error) {
        console.error('Error fetching users:', error.message);
        res.status(500).json({ error: 'Server error' });
    }
});

// Get User Profile
app.get('/api/users/:userId', authenticate, async (req, res) => {
    try {
        const user = await User.findById(req.params.userId, 'name email location designation status image').lean();
        if (!user) return res.status(404).json({ error: 'User not found' });
        res.json(user);
    } catch (error) {
        console.error('Error fetching user profile:', error.message);
        res.status(500).json({ error: 'Server error' });
    }
});

// Create Group
app.post('/api/groups', authenticate, async (req, res) => {
    try {
        const { name } = req.body;
        if (!name) return res.status(400).json({ error: 'Group name is required' });
        const group = new Group({
            name,
            creator: req.userId,
            members: [{ userId: req.userId, canSendMessages: true }]
        });
        await group.save();
        const populatedGroup = await Group.findById(group._id).lean();
        res.status(201).json(populatedGroup);
    } catch (error) {
        console.error('Error creating group:', error.message);
        res.status(500).json({ error: 'Server error' });
    }
});

// Get All Groups
app.get('/api/groups', authenticate, async (req, res) => {
    try {
        const groups = await Group.find({ "members.userId": req.userId })
            .populate('creator', 'name')
            .populate('members.userId', 'name')
            .lean();
        const flattenedGroups = groups.map(group => ({
            ...group,
            creator: group.creator ? { _id: group.creator._id, name: group.creator.name } : group.creator,
            members: group.members.map(member => ({
                userId: member.userId ? { _id: member.userId._id, name: member.userId.name } : member.userId,
                canSendMessages: member.canSendMessages
            }))
        }));
        res.json(flattenedGroups);
    } catch (error) {
        console.error('Error fetching groups:', error.message);
        res.status(500).json({ error: 'Server error' });
    }
});

// Add Member to Group
app.put('/api/groups/:groupId/members', authenticate, async (req, res) => {
    try {
        const { groupId } = req.params;
        const { userId, canSendMessages } = req.body;
        const group = await Group.findById(groupId);
        if (!group) return res.status(404).json({ error: 'Group not found' });
        if (group.creator.toString() !== req.userId) return res.status(403).json({ error: 'Only group admin can add members' });
        if (group.members.some(m => m.userId.toString() === userId)) return res.status(400).json({ error: 'User already in group' });

        group.members.push({ userId, canSendMessages });
        await group.save();
        const updatedGroup = await Group.findById(groupId)
            .populate('creator', 'name')
            .populate('members.userId', 'name')
            .lean();
        const flattenedGroup = {
            ...updatedGroup,
            creator: updatedGroup.creator ? { _id: updatedGroup.creator._id, name: updatedGroup.creator.name } : updatedGroup.creator,
            members: updatedGroup.members.map(member => ({
                userId: member.userId ? { _id: member.userId._id, name: member.userId.name } : member.userId,
                canSendMessages: member.canSendMessages
            }))
        };
        res.json(flattenedGroup);
    } catch (error) {
        console.error('Error adding member to group:', error.message);
        res.status(500).json({ error: 'Server error' });
    }
});

// Update Group Permissions
app.put('/api/groups/:groupId/permissions', authenticate, async (req, res) => {
    try {
        const { groupId } = req.params;
        const { userId, canSendMessages } = req.body;
        const group = await Group.findById(groupId);
        if (!group) return res.status(404).json({ error: 'Group not found' });
        if (group.creator.toString() !== req.userId) return res.status(403).json({ error: 'Only group admin can modify permissions' });

        const member = group.members.find(m => m.userId.toString() === userId);
        if (!member) return res.status(404).json({ error: 'Member not found' });
        if (member.userId.toString() === req.userId) return res.status(400).json({ error: 'Cannot modify admin permissions' });

        member.canSendMessages = canSendMessages;
        await group.save();
        const updatedGroup = await Group.findById(groupId)
            .populate('creator', 'name')
            .populate('members.userId', 'name')
            .lean();
        const flattenedGroup = {
            ...updatedGroup,
            creator: updatedGroup.creator ? { _id: updatedGroup.creator._id, name: updatedGroup.creator.name } : updatedGroup.creator,
            members: updatedGroup.members.map(member => ({
                userId: member.userId ? { _id: member.userId._id, name: member.userId.name } : member.userId,
                canSendMessages: member.canSendMessages
            }))
        };
        res.json(flattenedGroup);
    } catch (error) {
        console.error('Error updating group permissions:', error.message);
        res.status(500).json({ error: 'Server error' });
    }
});

// File Upload Endpoint
app.post('/api/upload', authenticate, upload.single('file'), async (req, res) => {
    try {
        if (!req.file) return res.status(400).json({ error: 'No file uploaded' });

        if (req.body.group) {
            const group = await Group.findById(req.body.group);
            if (!group) return res.status(404).json({ error: 'Group not found' });
            const member = group.members.find(m => m.userId.toString() === req.userId);
            if (group.creator.toString() !== req.userId && (!member || !member.canSendMessages)) {
                return res.status(403).json({ error: 'No permission to send files in this group' });
            }
        }

        const fileDoc = new File({
            name: req.file.filename,
            originalName: req.file.originalname,
            size: req.file.size,
            mimeType: req.file.mimetype,
            path: `/uploads/${req.file.filename}`,
            sender: req.userId,
            recipient: req.body.recipient || null,
            group: req.body.group || null,
        });

        await fileDoc.save();

        const fileData = {
            name: req.file.originalName,
            url: `http://localhost:3000${fileDoc.path}`,
            size: req.file.size,
            mimeType: req.file.mimetype,
            _id: fileDoc._id
        };

        res.json(fileData);

        const sender = await User.findById(req.userId).lean();
        const messageData = {
            sender: { _id: req.userId, name: sender.name },
            file: fileData,
            recipient: req.body.recipient || null,
            group: req.body.group || null,
            tempId: req.body.tempId,
            timestamp: new Date()
        };

        if (req.body.recipient) {
            io.to(req.body.recipient).emit('chatMessage', messageData);
            io.to(req.userId).emit('chatMessage', messageData);
        } else if (req.body.group) {
            io.to(req.body.group).emit('chatMessage', messageData); // Broadcast to group room
        }
    } catch (error) {
        console.error('File upload error:', error.message);
        res.status(500).json({ error: 'Server error' });
    }
});

// Get Private Messages (Including Files)
app.get('/api/messages/private/:userId', authenticate, async (req, res) => {
    try {
        const messages = await Message.find({
            $or: [
                { sender: req.userId, recipient: req.params.userId },
                { sender: req.params.userId, recipient: req.userId },
            ],
        }).populate('sender', 'name').lean();

        const files = await File.find({
            $or: [
                { sender: req.userId, recipient: req.params.userId },
                { sender: req.params.userId, recipient: req.userId },
            ],
        }).populate('sender', 'name').lean();

        const formattedMessages = messages.map(msg => ({
            ...msg,
            sender: { _id: msg.sender._id, name: msg.sender.name },
            content: msg.sender._id.toString() === req.userId.toString() ? msg.plaintextContent : msg.encryptedContent,
        }));

        const formattedFiles = files.map(file => ({
            sender: { _id: file.sender._id, name: file.sender.name },
            file: {
                name: file.originalName,
                url: `http://localhost:3000${file.path}`,
                size: file.size,
                mimeType: file.mimeType,
                _id: file._id
            },
            recipient: file.recipient,
            timestamp: file.createdAt
        }));

        res.json([...formattedMessages, ...formattedFiles].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp)));
    } catch (error) {
        console.error('Error fetching private messages:', error.message);
        res.status(500).json({ error: 'Server error' });
    }
});

// Get Group Messages (Including Files)
app.get('/api/messages/group/:groupId', authenticate, async (req, res) => {
    try {
        const group = await Group.findById(req.params.groupId);
        if (!group || !group.members.some(m => m.userId.toString() === req.userId)) {
            return res.status(403).json({ error: 'Not a member of this group' });
        }

        const messages = await Message.find({ group: req.params.groupId }).populate('sender', 'name').lean();
        const files = await File.find({ group: req.params.groupId }).populate('sender', 'name').lean();

        const formattedMessages = messages.map(msg => ({
            ...msg,
            sender: { _id: msg.sender._id, name: msg.sender.name },
            content: msg.plaintextContent,
        }));

        const formattedFiles = files.map(file => ({
            sender: { _id: file.sender._id, name: file.sender.name },
            file: {
                name: file.originalName,
                url: `http://localhost:3000${file.path}`,
                size: file.size,
                mimeType: file.mimeType,
                _id: file._id
            },
            group: file.group,
            timestamp: file.createdAt
        }));

        res.json([...formattedMessages, ...formattedFiles].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp)));
    } catch (error) {
        console.error('Error fetching group messages:', error.message);
        res.status(500).json({ error: 'Server error' });
    }
});

// Socket.io Connection
io.on('connection', (socket) => {
    console.log('Client connected:', socket.id);

    const token = socket.handshake.auth.token;
    if (!token) {
        console.log('No token provided, disconnecting:', socket.id);
        socket.disconnect(true);
        return;
    }

    let userId;
    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        userId = decoded.id;
        socket.userId = userId;
        socket.join(userId); // Join user's personal room
        socket.emit('userId', userId);
        console.log(`User ${userId} authenticated and joined personal room`);
    } catch (err) {
        console.error('Connection token error:', err.message);
        socket.disconnect(true);
        return;
    }

    socket.on('joinGroup', (groupId) => {
        socket.join(groupId);
        console.log(`User ${socket.userId} joined group room ${groupId}`);
        // List rooms for debugging
        console.log(`Current rooms for socket ${socket.id}:`, socket.rooms);
    });

    socket.on('leaveGroup', (groupId) => {
        socket.leave(groupId);
        console.log(`User ${socket.userId} left group room ${groupId}`);
    });

    socket.on('chatMessage', async (msgData) => {
        try {
            console.log('Received chatMessage:', msgData);
            const sender = await User.findById(socket.userId).lean();
            if (!sender) throw new Error('Sender not found');

            if (msgData.group) {
                const group = await Group.findById(msgData.group);
                if (!group) throw new Error('Group not found');
                const member = group.members.find(m => m.userId.toString() === socket.userId);
                if (group.creator.toString() !== socket.userId && (!member || !member.canSendMessages)) {
                    socket.emit('error', { message: 'No permission to send messages in this group' });
                    console.log(`Permission denied for user ${socket.userId} in group ${msgData.group}`);
                    return;
                }
            }

            if (msgData.file) {
                const fileMessage = {
                    sender: { _id: socket.userId, name: sender.name },
                    file: msgData.file,
                    recipient: msgData.recipient || null,
                    group: msgData.group || null,
                    tempId: msgData.tempId,
                    timestamp: new Date()
                };
                if (msgData.recipient) {
                    io.to(msgData.recipient).emit('chatMessage', fileMessage);
                    io.to(socket.userId).emit('chatMessage', fileMessage);
                    console.log(`File message sent to recipient ${msgData.recipient} and sender ${socket.userId}`);
                } else if (msgData.group) {
                    io.to(msgData.group).emit('chatMessage', fileMessage);
                    console.log(`File message broadcast to group room ${msgData.group}`);
                }
                return;
            }

            let message = {
                sender: socket.userId,
                timestamp: new Date(),
                tempId: msgData.tempId,
            };

            if (msgData.recipient) {
                const recipient = await User.findById(msgData.recipient).lean();
                if (!recipient) throw new Error('Recipient not found');

                const encryptedContent = encryptMessage(msgData.content, recipient.publicKey);
                message.plaintextContent = msgData.content;
                message.encryptedContent = encryptedContent;
                message.recipient = msgData.recipient;

                const savedMessage = await Message.create(message);
                const populatedMessage = await Message.findById(savedMessage._id).populate('sender', 'name').lean();

                io.to(msgData.recipient).emit('chatMessage', {
                    ...populatedMessage,
                    sender: { _id: populatedMessage.sender._id, name: populatedMessage.sender.name },
                    content: populatedMessage.encryptedContent,
                    tempId: msgData.tempId,
                });

                io.to(socket.userId).emit('chatMessage', {
                    ...populatedMessage,
                    sender: { _id: populatedMessage.sender._id, name: populatedMessage.sender.name },
                    content: populatedMessage.plaintextContent,
                    tempId: msgData.tempId,
                });
                console.log(`Private message sent to ${msgData.recipient} and sender ${socket.userId}`);
            } else if (msgData.group) {
                message.group = msgData.group;
                message.plaintextContent = msgData.content;
                message.encryptedContent = null;

                const savedMessage = await Message.create(message);
                const populatedMessage = await Message.findById(savedMessage._id).populate('sender', 'name').lean();

                io.to(msgData.group).emit('chatMessage', {
                    ...populatedMessage,
                    sender: { _id: populatedMessage.sender._id, name: populatedMessage.sender.name },
                    content: populatedMessage.plaintextContent,
                    tempId: msgData.tempId,
                });
                console.log(`Group message broadcast to group room ${msgData.group}`);
            }
        } catch (err) {
            console.error('Chat message error:', err.message);
            socket.emit('error', { message: 'Failed to send message' });
        }
    });

    socket.on('disconnect', async () => {
        console.log('Client disconnected:', socket.id);
        try {
            const user = await User.findById(socket.userId);
            if (user) {
                user.status = 'Offline';
                await user.save();
                io.emit('statusUpdate', { userId: socket.userId, status: 'Offline' });
            }
        } catch (err) {
            console.error('Disconnect error:', err.message);
        }
    });
});
// Start Server
const PORT = 3000;
server.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
    console.log(`Test endpoint: http://localhost:${PORT}/test`);
});